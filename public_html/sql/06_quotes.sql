-- Create quote_requests table
create table quote_requests (
  id bigint generated by default as identity primary key,
  name text not null,
  email text not null,
  phone text not null,
  company text,
  service_type text not null check (service_type in ('logistics', 'drilling', 'construction', 'engineering', 'other')),
  project_details text not null,
  budget_range text,
  timeline text,
  status text not null check (status in ('pending', 'reviewed', 'approved', 'rejected')) default 'pending',
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Set up RLS policies
alter table quote_requests enable row level security;

create policy "Public insert quote_requests"
  on quote_requests for insert
  with check (true);

create policy "Admin manage quote_requests"
  on quote_requests for all
  using (auth.role() = 'authenticated');

-- Create trigger for updated_at
create trigger update_quote_requests_updated_at
  before update on quote_requests
  for each row
  execute function update_updated_at_column();

-- Create notifications table for quote request updates
create table quote_notifications (
  id bigint generated by default as identity primary key,
  quote_request_id bigint references quote_requests(id) on delete cascade,
  type text not null check (type in ('status_change', 'comment', 'review')),
  message text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Set up RLS policies for notifications
alter table quote_notifications enable row level security;

create policy "Admin manage quote notifications"
  on quote_notifications for all
  using (auth.role() = 'authenticated'); 